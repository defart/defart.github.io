<html>
<head>
</head>
<body>
<h2 id="accessToken"></h2>
<h1>Iframe OPS Portal plugin</h1>
<script type="text/javascript">
    class IPMClient {

        constructor(portalUrl, window = window) {
            this.portalUrl = portalUrl;
            this.pluginFrame = window;
            this.portalWindow = window.parent;
            this.promiseQueue = {};
        }

        init() {
            this.pluginFrame.addEventListener("message", this.onMessage.bind(this));
            return this.send('connect', null).then(() => this.getApi());
        }

        onMessage(e) {
            console.log("IFRAME RECEIVED", e);
            if (e.origin !== this.portalUrl) { return; }

            try {
                const message = JSON.parse(e.data);
                if (this.promiseQueue.hasOwnProperty(message.id)) {
                    this.promiseQueue[message.id].resolve(message);
                }
            } catch(e) {
                console.log("IFRAME REC FAILED", e);
            }

        }

        send(action, payload) {
            const id = this.uuidv4();
            const message = {
                id,
                action,
                payload,
                created: new Date()
            };

            return new Promise((resolveFn, rejectFn) => {
                this.promiseQueue[id] = {
                    resolve: resolveFn,
                    reject: rejectFn
                };
                this.portalWindow.postMessage(JSON.stringify(message), this.portalUrl);
            })
        }

        uuidv4() {
            return ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c =>
                (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)
            );
        }

        getApi() {
            return {
                getUserName: () => this.send('getUserName'),
                getUser: () => this.send('getUser'),
                getPlugins: () => this.send('getPlugins'),
                getAccessToken: () => this.send('getAccessToken'),
                call: (url, data, headers, method) => {
                    const message = {
                        url,
                        data,
                        headers: headers || {},
                        method: method || "GET"
                    };
                    return this.send('call', message);
                }
            }
        }
     }
</script>
<script type="text/javascript">
        const api = new IPMClient("http://localhost:3000",  window);
        const promise = api.init();
        console.log(promise);
        promise.then(api => {

            api.getPlugins().then(result => {
                console.log(" GOT PLUGS", result.payload);
                document.querySelector('#plugins').innerHTML = JSON.stringify(result.payload);
            });

            api.getAccessToken().then(result => {
                console.log("Got accesstoken", result.payload);
                document.querySelector('#at').value = JSON.stringify(result.payload);
            });
        })
        .catch(e => console.log('e',e))
        .finally(() => console.log("FInally done"));
</script>

<label>Get Plugins</label>
<textarea id="plugins">....</textarea>
<hr/>

<label>Access token</label>
<input id="at" />
<hr/>

</body>
